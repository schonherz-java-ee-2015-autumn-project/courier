<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:p="http://primefaces.org/ui"
	xmlns:pe="http://primefaces.org/ui/extensions"
	template="/templates/masterLayout.xhtml"
	xmlns:sec="http://www.springframework.org/security/tags">
	<ui:define name="pageTitle">#{out.pageTitle}</ui:define>
	<ui:define name="content">


		<section class="content">

			<div class="row">
				<div class="col-xs-12 col-sm-12 col-md-6">
					<div class="box box-primary">
						<div class="box-header with-border">
							<h3 class="box-title">
								#{out.welcome} <b>#{userSessionBean.userVO.fullname}</b>!
							</h3>
						</div>

						<div class="box-body">



							<b>#{out.transporting}</b> <a class="pull-right"><h:outputLabel
									rendered="#{userSessionBean.userVO.transporting == 0}"
									value="#{out.nope}" /> <h:outputLabel
									rendered="#{userSessionBean.userVO.transporting != 0}"
									value="#{out.yes}" /></a>

						</div>
					</div>
				</div>
				<div class="col-xs-12 col-sm-12 col-md-6">
					<h:form id="timer">
						<div class="box box-primary">
							<div class="box-header with-border">
								<h3 class="box-title">#{out.workingProgress}</h3>
							</div>

							<div class="box-body">


								<canvas id="pieChart" style="height: 100px"></canvas>
								<h:outputScript library="plugins" name="chartjs/Chart.min.js" />
								<script type="text/javascript">
									//<![CDATA[

									// -------------
									// - PIE CHART -
									// -------------
									// Get context with jQuery - using jQuery's .get() method.
									var pieChartCanvas = $("#pieChart").get(0)
											.getContext("2d");
									var pieChart = new Chart(pieChartCanvas);
									var PieData = [
											{
												value : '#{timerBean.workingPercentage}',
												color : "#00a65a",
												highlight : "#00a65a",
												label : "Worked(%) "
											},
											{
												value : 100 - '#{timerBean.workingPercentage}',
												color : "#f56954",
												highlight : "#f56954",
												label : "Remaining(%) "
											} ];
									var pieOptions = {
										// Boolean - Whether we should show a stroke on each
										// segment
										segmentShowStroke : true,
										// String - The colour of each segment stroke
										segmentStrokeColor : "#fff",
										// Number - The width of each segment stroke
										segmentStrokeWidth : 2,
										// Number - The percentage of the chart that we cut out
										// of the middle
										percentageInnerCutout : 50, // This is 0 for Pie charts
										// Number - Amount of animation steps
										animationSteps : 100,
										// String - Animation easing effect
										animationEasing : "easeOutBounce",
										// Boolean - Whether we animate the rotation of the
										// Doughnut
										animateRotate : true,
										// Boolean - Whether we animate scaling the Doughnut
										// from the centre
										animateScale : false,
										// Boolean - whether to make the chart responsive to
										// window resizing
										responsive : true,
										// Boolean - whether to maintain the starting aspect
										// ratio or not when responsive, if set to false, will
										// take up entire container
										maintainAspectRatio : true,
										// String - A legend template
										legendTemplate : "<ul class=\"<%=name.toLowerCase()%>-legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].fillColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>",
									};
									// Create pie or douhnut chart
									// You can switch between pie and douhnut using the method
									// below.
									pieChart.Doughnut(PieData, pieOptions);

									//]]>
								</script>


							</div>
							<div class="box-footer">

								<h:outputText rendered="#{timerBean.minutes == 0}"
									value="#{out.justStarted}" />

								<h:outputText rendered="#{timerBean.minutes != 0}"
									value="#{out.loggedIn} " />

								<h:outputText rendered="#{timerBean.hours != 0}"
									value="#{timerBean.hours} #{out.hours} " />

								<h:outputText rendered="#{timerBean.minutes != 0}"
									value="#{timerBean.minutes} #{out.minutes}" />

								<pe:timer timeout="59" singleRun="false" visible="false"
									listener="#{timerBean.onTimeout}" update="timer" />
							</div>
							<!-- /.box-footer-->
						</div>
					</h:form>
				</div>
			</div>
			<!-- /.col (LEFT) -->

		</section>


	</ui:define>
</ui:composition>